{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","quantity","setQuantity","width","setWidth","height","setHeight","shape","setShape","background","setBackground","hasBorder","setHasBorder","isSpread","setIsSpread","viewportClassName","setViewportClassName","items","setItems","updatePage","e","preventDefault","Array","fill","style","backgroundImage","className","onSubmit","type","min","value","onChange","parseInt","target","accept","imgField","FileReader","files","length","fr","onload","imgData","result","readAsDataURL","checked","onClick","window","print","map","item","idx","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01fa9ff7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [ quantity, setQuantity ] = useState(0);\n  const [ width, setWidth ] = useState(0);\n  const [ height, setHeight ] = useState(0);\n  const [ shape, setShape ] = useState('square');\n  const [ background, setBackground ] = useState(null);\n  const [ hasBorder, setHasBorder ] = useState(true);\n  const [ isSpread, setIsSpread ] = useState(true);\n\n  const [ viewportClassName, setViewportClassName ] = useState('viewport');\n  const [ items, setItems ] = useState([]);\n\n  const getBackgroundData = e => {\n    e.preventDefault();\n\n    const imgField = e.target;\n    \n    if (FileReader && imgField && imgField.files && imgField.files.length) {\n      const fr = new FileReader();\n      fr.onload = function () {\n        const imgData = fr.result;\n        setBackground(imgData);\n      };\n      fr.readAsDataURL(imgField.files[0]);\n    } else {\n      setBackground(null);\n    }\n  }\n\n  const updatePage = e => {\n    e.preventDefault();\n\n    const viewportClass = 'viewport ' + shape +\n      (shape !== 'circle' && shape !== 'square' ? ' shape' : '') +\n      (hasBorder ? ' has-border' : ' no-border') +\n      (isSpread ? ' spread' : ' no-spread');\n    \n    setViewportClassName(viewportClass);\n\n    setItems(Array(quantity).fill({\n      style: {\n        width: width + 'mm',\n        height: height + 'mm',\n        backgroundImage: background ? 'url(' + background + ')' : 'none'\n      } \n    }));\n  }\n\n  const printPage = e => {\n    e.preventDefault()\n    window.print();\n  }\n\n  return (\n    <div className=\"app\">\n      <form className=\"form\" onSubmit={updatePage}>\n        <h1 className=\"app-name\">Papelab</h1>\n        <label>\n          <span>Quantidade:</span>\n          <input type=\"number\" min={0} value={quantity} className=\"form-field\"\n            onChange={e => setQuantity(parseInt(e.target.value, 10))} />\n        </label>\n        <label>\n          <span>Largura (mm):</span>\n          <input type=\"number\" min={0} value={width} className=\"form-field\"\n            onChange={e => setWidth(parseInt(e.target.value, 10))} />\n        </label>\n        <label>\n          <span>Altura (mm):</span>\n          <input type=\"number\" min={0} value={height} className=\"form-field\"\n            onChange={e => setHeight(parseInt(e.target.value, 10))} />\n        </label>\n        <label>\n          <span>Formato:</span>\n          <select onChange={e => setShape(e.target.value)}>\n            <option value=\"square\">Retângulo</option>\n            <option value=\"circle\">Círculo</option>\n            <option value=\"star\">Estrela</option>\n            <option value=\"heart\">Coração</option>\n            <option value=\"tag\">Etiqueta</option>\n          </select>\n        </label>\n        <label>\n          <span>Imagem:</span>\n          <input type=\"file\" accept=\"image/*\" onChange={getBackgroundData} />\n        </label>\n        <label>\n          <span>&nbsp;</span>\n          <input type=\"checkbox\" checked={hasBorder}\n            onChange={e => setHasBorder(e.target.checked)} />\n          {' '}Com borda?\n        </label>\n        <label>\n          <span>&nbsp;</span>\n          <input type=\"checkbox\" checked={isSpread}\n            onChange={e => setIsSpread(e.target.checked)} />\n          {' '}Separados?\n        </label>\n        <div className=\"actions\">\n          <button onClick={updatePage}>Atualizar</button>{' '}\n          <button onClick={printPage}>Imprimir</button>\n        </div>\n      </form>\n      <div className=\"container\">\n        <div className={viewportClassName}>\n          {items && items.map(\n            (item, idx) => (\n              <div className=\"item\" key={idx} style={item.style}></div>\n            )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}